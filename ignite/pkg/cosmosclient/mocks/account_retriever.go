// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	client "github.com/cosmos/cosmos-sdk/client"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// AccountRetriever is an autogenerated mock type for the AccountRetriever type
type AccountRetriever struct {
	mock.Mock
}

type AccountRetriever_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountRetriever) EXPECT() *AccountRetriever_Expecter {
	return &AccountRetriever_Expecter{mock: &_m.Mock}
}

// EnsureExists provides a mock function with given fields: clientCtx, addr
func (_m *AccountRetriever) EnsureExists(clientCtx client.Context, addr types.AccAddress) error {
	ret := _m.Called(clientCtx, addr)

	if len(ret) == 0 {
		panic("no return value specified for EnsureExists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(client.Context, types.AccAddress) error); ok {
		r0 = rf(clientCtx, addr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountRetriever_EnsureExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureExists'
type AccountRetriever_EnsureExists_Call struct {
	*mock.Call
}

// EnsureExists is a helper method to define mock.On call
//   - clientCtx client.Context
//   - addr types.AccAddress
func (_e *AccountRetriever_Expecter) EnsureExists(clientCtx interface{}, addr interface{}) *AccountRetriever_EnsureExists_Call {
	return &AccountRetriever_EnsureExists_Call{Call: _e.mock.On("EnsureExists", clientCtx, addr)}
}

func (_c *AccountRetriever_EnsureExists_Call) Run(run func(clientCtx client.Context, addr types.AccAddress)) *AccountRetriever_EnsureExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.Context), args[1].(types.AccAddress))
	})
	return _c
}

func (_c *AccountRetriever_EnsureExists_Call) Return(_a0 error) *AccountRetriever_EnsureExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountRetriever_EnsureExists_Call) RunAndReturn(run func(client.Context, types.AccAddress) error) *AccountRetriever_EnsureExists_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: clientCtx, addr
func (_m *AccountRetriever) GetAccount(clientCtx client.Context, addr types.AccAddress) (client.Account, error) {
	ret := _m.Called(clientCtx, addr)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 client.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(client.Context, types.AccAddress) (client.Account, error)); ok {
		return rf(clientCtx, addr)
	}
	if rf, ok := ret.Get(0).(func(client.Context, types.AccAddress) client.Account); ok {
		r0 = rf(clientCtx, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(client.Context, types.AccAddress) error); ok {
		r1 = rf(clientCtx, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRetriever_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type AccountRetriever_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - clientCtx client.Context
//   - addr types.AccAddress
func (_e *AccountRetriever_Expecter) GetAccount(clientCtx interface{}, addr interface{}) *AccountRetriever_GetAccount_Call {
	return &AccountRetriever_GetAccount_Call{Call: _e.mock.On("GetAccount", clientCtx, addr)}
}

func (_c *AccountRetriever_GetAccount_Call) Run(run func(clientCtx client.Context, addr types.AccAddress)) *AccountRetriever_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.Context), args[1].(types.AccAddress))
	})
	return _c
}

func (_c *AccountRetriever_GetAccount_Call) Return(_a0 client.Account, _a1 error) *AccountRetriever_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRetriever_GetAccount_Call) RunAndReturn(run func(client.Context, types.AccAddress) (client.Account, error)) *AccountRetriever_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountNumberSequence provides a mock function with given fields: clientCtx, addr
func (_m *AccountRetriever) GetAccountNumberSequence(clientCtx client.Context, addr types.AccAddress) (uint64, uint64, error) {
	ret := _m.Called(clientCtx, addr)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountNumberSequence")
	}

	var r0 uint64
	var r1 uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(client.Context, types.AccAddress) (uint64, uint64, error)); ok {
		return rf(clientCtx, addr)
	}
	if rf, ok := ret.Get(0).(func(client.Context, types.AccAddress) uint64); ok {
		r0 = rf(clientCtx, addr)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(client.Context, types.AccAddress) uint64); ok {
		r1 = rf(clientCtx, addr)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(client.Context, types.AccAddress) error); ok {
		r2 = rf(clientCtx, addr)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AccountRetriever_GetAccountNumberSequence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountNumberSequence'
type AccountRetriever_GetAccountNumberSequence_Call struct {
	*mock.Call
}

// GetAccountNumberSequence is a helper method to define mock.On call
//   - clientCtx client.Context
//   - addr types.AccAddress
func (_e *AccountRetriever_Expecter) GetAccountNumberSequence(clientCtx interface{}, addr interface{}) *AccountRetriever_GetAccountNumberSequence_Call {
	return &AccountRetriever_GetAccountNumberSequence_Call{Call: _e.mock.On("GetAccountNumberSequence", clientCtx, addr)}
}

func (_c *AccountRetriever_GetAccountNumberSequence_Call) Run(run func(clientCtx client.Context, addr types.AccAddress)) *AccountRetriever_GetAccountNumberSequence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.Context), args[1].(types.AccAddress))
	})
	return _c
}

func (_c *AccountRetriever_GetAccountNumberSequence_Call) Return(accNum uint64, accSeq uint64, err error) *AccountRetriever_GetAccountNumberSequence_Call {
	_c.Call.Return(accNum, accSeq, err)
	return _c
}

func (_c *AccountRetriever_GetAccountNumberSequence_Call) RunAndReturn(run func(client.Context, types.AccAddress) (uint64, uint64, error)) *AccountRetriever_GetAccountNumberSequence_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountWithHeight provides a mock function with given fields: clientCtx, addr
func (_m *AccountRetriever) GetAccountWithHeight(clientCtx client.Context, addr types.AccAddress) (client.Account, int64, error) {
	ret := _m.Called(clientCtx, addr)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountWithHeight")
	}

	var r0 client.Account
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(client.Context, types.AccAddress) (client.Account, int64, error)); ok {
		return rf(clientCtx, addr)
	}
	if rf, ok := ret.Get(0).(func(client.Context, types.AccAddress) client.Account); ok {
		r0 = rf(clientCtx, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(client.Context, types.AccAddress) int64); ok {
		r1 = rf(clientCtx, addr)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(client.Context, types.AccAddress) error); ok {
		r2 = rf(clientCtx, addr)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AccountRetriever_GetAccountWithHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountWithHeight'
type AccountRetriever_GetAccountWithHeight_Call struct {
	*mock.Call
}

// GetAccountWithHeight is a helper method to define mock.On call
//   - clientCtx client.Context
//   - addr types.AccAddress
func (_e *AccountRetriever_Expecter) GetAccountWithHeight(clientCtx interface{}, addr interface{}) *AccountRetriever_GetAccountWithHeight_Call {
	return &AccountRetriever_GetAccountWithHeight_Call{Call: _e.mock.On("GetAccountWithHeight", clientCtx, addr)}
}

func (_c *AccountRetriever_GetAccountWithHeight_Call) Run(run func(clientCtx client.Context, addr types.AccAddress)) *AccountRetriever_GetAccountWithHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.Context), args[1].(types.AccAddress))
	})
	return _c
}

func (_c *AccountRetriever_GetAccountWithHeight_Call) Return(_a0 client.Account, _a1 int64, _a2 error) *AccountRetriever_GetAccountWithHeight_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AccountRetriever_GetAccountWithHeight_Call) RunAndReturn(run func(client.Context, types.AccAddress) (client.Account, int64, error)) *AccountRetriever_GetAccountWithHeight_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccountRetriever creates a new instance of AccountRetriever. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRetriever(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRetriever {
	mock := &AccountRetriever{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
